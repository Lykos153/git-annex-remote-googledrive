#!/usr/bin/env python3.6
# git-annex-remote-gdrive2 - python rewrite of git-annex-remote-gdrive to add direct support for Google Drive to git annex
#
# Install in PATH as git-annex-remote-gdrive2
#
# Copyright (C) 2017  Silvio Ankermann
#
# This program is free software: you can redistribute it and/or modify it under the terms of version 3 of the GNU
# General Public License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#

from abc import ABC, abstractmethod

import os
import sys
import string

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from oauth2client.client import OAuth2Credentials


# Exceptions
class RequestError(Exception):
    pass

class UnsupportedRequest(RequestError):
    pass

class UnexpectedMessage(RequestError):
    pass

class RemoteReply():
    pass

class PrepareFailure(RemoteReply):
    pass

class InitremoteFailure(RemoteReply):
    pass

class RemoteReply():
    pass

class TransferSuccess(RemoteReply):
    pass

class TransferFailure(RemoteReply):
    pass

class CheckpresentSuccess(RemoteReply):
    pass

class CheckpresentFailure(RemoteReply):
    pass

class RemoveSuccess(RemoteReply):
    pass

class RemoveFailure(RemoteReply):
    pass

class ClaimurlSuccess(RemoteReply):
    pass

class ClaimurlFailure(RemoteReply):
    pass

class CheckurlSuccess(RemoteReply):
    pass

class CheckurlFailure(RemoteReply):
    pass

class WhereisSuccess(RemoteReply):
    pass

class WhereisFailure(RemoteReply):
    pass

class SpecialRemote(ABC):

    @abstractmethod
    def __init__(self, annex):
        pass

    @abstractmethod
    def initremote(self):
        pass

    @abstractmethod
    def prepare(self):
        pass

    @abstractmethod
    def transfer_store(self, key, file_):
        pass

    @abstractmethod
    def transfer_retrieve(self, key, file_):
        pass

    @abstractmethod
    def checkpresent(self, key):
        pass

    @abstractmethod
    def remove(self, key):
        pass
    
    # Wrapper for transfer_store and transfer_retrieve
    def transfer(self, method, key, file_):
        if method == "STORE":
            return self.transfer_store(key, file_)
        elif method == "RETRIEVE":
            return self.transfer_retrieve(key, file_)
   
    # Optional requests
    def getcost(self):
        raise UnsupportedRequest()

    def getavailability(self):
        raise UnsupportedRequest()

    def claimurl(self, url):
        raise UnsupportedRequest()

    def checkurl(self):
        raise UnsupportedRequest()

    def whereis(self):
        raise UnsupportedRequest()

    # Setup function to be run before initremote to handle things like authentication interactively
    def setup(self):
        print("Nothing to do. Just run 'git annex initremote' with your desired parameters")


# The Google class
class GoogleRemote(SpecialRemote):

    def __init__(self, annex):
        self.annex = annex
        # Authentication
        self.gauth = GoogleAuth()
        self.gauth.settings['client_config_backend'] = 'settings'
        self.gauth.settings['client_config'] = {'client_id': '914459249505-ji3d9v92ealsmc4a63ns66uoj9t6mdf0.apps.googleusercontent.com', 'client_secret': 'ivD4Ms4eROu10sHc43ojgX05', 'auth_uri':'https://accounts.google.com/o/oauth2/auth', 'token_uri':'https://accounts.google.com/o/oauth2/token', 'revoke_uri': None, 'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob'}
        
    def setup(self):
        self.gauth.LoadCredentialsFile("token.json")
        
        if self.gauth.credentials is None:
            self.gauth.CommandLineAuth()
            #self.gauth.LocalWebserverAuth()
        elif self.gauth.access_token_expired:
            self.gauth.Refresh()
        else:
            self.gauth.Authorize()
        
        self.gauth.SaveCredentialsFile("token.json")
        print("Setup complete. An auth token was stored in token.json. Now run 'git annex initremote' with your desired parameters. If you don't run it from the same folder, specify via token=path/to/token.json")

    def initremote(self):
        self.prefix = self.annex.getconfig("prefix")

        token_file = self.annex.getconfig("token") or "token.json"
        self.gauth.LoadCredentialsFile(token_file)

        if self.gauth.credentials is None:
            credentials = self.annex.getcreds("credentials")["user"]
            if credentials:
                self.gauth.credentials = OAuth2Credentials.from_json(credentials)
            #else:
            #    self.gauth.LocalWebserverAuth()
        
        try:
            if self.gauth.access_token_expired:
                self.gauth.Refresh()
            else:
                self.gauth.Authorize()
            self.drive = GoogleDrive(self.gauth)
            self.root = self.__getfolder(self.prefix)
        except:
            return "INITREMOTE-FAILURE Failed to create directory on remote. Ensure that you are connected to the internet and have successfully run 'git-annex-remote-gdrive setup'."

        self.annex.setconfig("root_id", self.root['id'])
        credentials = ''.join(self.gauth.credentials.to_json().split())
        self.annex.setcreds("credentials", credentials, "")
        
        try:
            os.remove(token_file)
        except:
            pass

        return "INITREMOTE-SUCCESS"

    def prepare(self):
        self.prefix = self.annex.getconfig("prefix")
        credentials = self.annex.getcreds("credentials")["user"]

        try:
            self.gauth.credentials = OAuth2Credentials.from_json(credentials)
            if self.gauth.access_token_expired:
                self.gauth.Refresh()
            else:
                self.gauth.Authorize()
            
            self.drive = GoogleDrive(self.gauth)
            self.root = self.__getfolder(self.prefix)
        except:
            return "PREPARE-FAILURE Failed to create directory on remote. Ensure that gdrive has been configured correctly and has permission to access your Drive."
        if self.root['id'] != self.annex.getconfig("root_id"):
            return "PREPARE-FAILURE ID of root folder changed. Was the repo moved? Please check remote and re-run git annex enableremote"

        credentials = ''.join(self.gauth.credentials.to_json().split())
        self.annex.setcreds("credentials", credentials, "")
        return "PREPARE-SUCCESS"

    def transfer_store(self, key, file_):
        try:
            file_list = self.drive.ListFile({'q': f"'{self.root['id']}' in parents and title='{key}' and trashed=false"}).GetList()
        except:
            return f"TRANSFER-FAILURE STORE {key}"
        else:
            if (len(file_list) == 1):
                self.__storeid(key, file_list[0]['id'])
                return f"TRANSFER-SUCCESS STORE {key}"
            elif (len(file_list) == 0):
                newfile = self.drive.CreateFile({'title': key, 'parents': [{'kind': 'drive#parentReference', 'id': self.root['id']}] })
                newfile.SetContentFile(file_)
                try:
                    newfile.Upload()
                except:
                    return f"TRANSFER-FAILURE STORE {key}"
                else:
                    self.__storeid(key, newfile['id'])
                    return f"TRANSFER-SUCCESS STORE {key}"
            else:
                raise self.AmbiguousFilenameException (f"There are two or more files named {key}")
    
    def transfer_retrieve(self, key, file_):
        try:
            newfile = self.__getfile(key)
            newfile.GetContentFile(file_)
        except:
            return f"TRANSFER-FAILURE RETRIEVE {key}"
        else:
            return f"TRANSFER-SUCCESS RETRIEVE {key}"
    
    def checkpresent(self, key):
        try:
            file_list = self.drive.ListFile({'q': f"'{self.root['id']}' in parents and title='{key}' and trashed=false"}).GetList()
        except:
            return f"CHECKPRESENT-UNKNOWN {key}"
        else:
            if (len(file_list) == 1):
                self.__storeid(key, file_list[0]['id'])
                return f"CHECKPRESENT-SUCCESS {key}"
            elif (len(file_list) == 0):
                return f"CHECKPRESENT-FAILURE {key}"
            else:
                raise self.AmbiguousFilenameException (f"There are two or more files named {key}")

    def remove(self, key):
        try:
            file_list = self.drive.ListFile({'q': f"'{self.root['id']}' in parents and title='{key}'"}).GetList()
        except:
            return f"REMOVE-FAILURE {key}"
        else:
            if (len(file_list) == 0):
                return f"REMOVE-SUCCESS {key}"
            else:
                try:
                    for file_ in file_list:
                        file_.Delete()
                except:
                    return f"REMOVE-FAILURE {key}"
                else:
                    return f"REMOVE-SUCCESS {key}"


    def __storeid(self, key, id_):
        self.annex.setstate(key, id_)

    def __getfile(self, key):
        #id_ = getstate(key)
        #if id_:
        #    return id_
        file_list = self.drive.ListFile({'q': f"'{self.root['id']}' in parents and title='{key}' and trashed=false"}).GetList()
        if (len(file_list) == 1):
            return file_list[0]
        elif (len(file_list) == 0):
            return None
        else:
            raise self.AmbiguousFilenameException (f"There are two or more files named {key}")
    
    def __getfolder(self, path):
        path_list = path.split('/')
        current_folder = self.drive.CreateFile({'id': 'root'})
        current_path = ""
        for folder in path_list:
            current_path = "/".join([current_path, folder])
            file_list = self.drive.ListFile({'q': f"'{current_folder['id']}' in parents and title='{folder}' and trashed=false"}).GetList()
            if (len(file_list) == 1):
                current_folder = file_list[0]
            elif (len(file_list) == 0):
                current_folder = self.drive.CreateFile({'title': folder, 'parents': [{'kind': 'drive#parentReference', 'id': current_folder['id']}], 'mimeType': "application/vnd.google-apps.folder"})
                current_folder.Upload()
            else:
                raise self.AmbiguousFilenameException (f"There are two or more folders named {current_path}")
        return current_folder

    class FileNotFoundException(Exception):
        pass
    class AmbiguousFilenameException(Exception):
        pass

class DummyRemote(SpecialRemote):
    def initremote(self):
        print("Initialising")
    def prepare(self):
        print("Preparing")
    def transfer_store(self, key, file_):
        print(f"Uploading {file_} to {key}")
    def transfer_retrieve(self, key, file_):
        print(f"Downloading {key} to {file_}")
    def checkpresent(self, key):
        print(f"Checking {key}")
    def remove(self, key):
        print(f"Removing {key}")

class RemoteMaster:
    def __init__(self, output):
        self.output = output

    def LinkRemote(self, remote):
        self.remote = remote
        self.requests = { 
                     "INITREMOTE": remote.initremote,
                     "PREPARE": remote.prepare,
                     "TRANSFER": remote.transfer,
                     "CHECKPRESENT": remote.checkpresent,
                     "REMOVE": remote.remove,
                     "GETCOST": remote.getcost,
                     "GETAVAILABILITY": remote.getavailability,
                     "CHECKURL": remote.checkurl,
                     "WHEREIS": remote.whereis
                    }

    def Listen(self, input_):
        self.input = input_
        self.__send("VERSION 1")
        for line in self.input:
            line = line.rstrip()
            line = line.split()
            try:
                if line[0] not in self.requests.keys():
                    raise UnsupportedRequest()
                self.__send(self.requests[line[0]](*line[1:]))
            except (UnsupportedRequest):
                self.__send ("UNSUPPORTED-REQUEST")
            except (NotImplementedError):
                self.__send ("ERROR not yet implemented")
                raise SystemExit
            #except Exception as e:
            #    self.__send ("ERROR", e)
            #    raise SystemExit
    
    def __ask(self, request, reply_keyword, reply_count):
        self.__send(request)
        line = self.input.readline().rstrip().split(maxsplit=reply_count)
        if line and line[0] == reply_keyword:
            line.extend([""] * (reply_count+1-len(line)))
            return line[1:]
        else:
            raise UnexpectedMessage(f"Expected {reply_keyword} and {reply_count} values")

    def __askvalues(self, request):
        self.__send(request)
        reply = []
        for line in self.input:
            line = line.rstrip()
            line = line.split(maxsplit=1)
            if len(line) == 2 and line[0] == "VALUE":
                 reply.append(line[1])
            elif len(line) == 1 and line[0] == "VALUE":
                return reply
            else:
                raise UnexpectedMessage("Expected VALUE {value}")

    def __askvalue(self, request):
        (reply,) = self.__ask(request, "VALUE", 1)
        return reply
    
    def getconfig(self, req):
        return self.__askvalue(f"GETCONFIG {req}")

    def setconfig(self, key, value):
        # make sure there is no whitespace
        for s in (key, value):
            if any([c in s for c in string.whitespace]):
                raise ValueError(f"Cannot set config. {s} contains whitespace")
        self.__send(f"SETCONFIG {key} {value}")

    def getstate(self, key):
        return self.__askvalue(f"GETSTATE {key}")

    def setstate(self, key, value):
        # make sure there is no whitespace
        for s in (key, value):
            if any([c in s for c in string.whitespace]):
                raise ValueError(f"Cannot set state. {s} contains whitespace")
        self.__send(f"SETSTATE {key} {value}")

    def debug(self, *args):
        self.__send("DEBUG", *args)

    def progress(self, progress):
        if type(progress) == int:
            self.send("PROGRESS", progress)
        else:
            raise TypeError("Expected integer")

    def dirhash(self, key):
        return self.__askvalue(f"DIRHASH {key}")

    def dirhash_lower(self, key):
        return self.__askvalue(f"DIRHASH-LOWER {key}")

    def setcreds(self, setting, user, password):
        self.__send("SETCREDS", setting, user, password)

    def getcreds(self, setting):
        (user, password) = self.__ask(f"GETCREDS {setting}", "CREDS", 2)
        return {'user': user, 'password': password}

    def getuuid(self):
        return self.__askvalue("GETUUID")

    def getgitdir(self):
        return self.__askvalue("GETGITDIR")

    def setwanted(self, prefcontent):
        self.__send("SETWANTED", prefcontent)

    def getwanted(self):
        return self.__askvalue("GETWANTED")

    def seturlpresent(self, key, url):
        self.__send("SETURLPRESENT", key, url)

    def seturlmissing(self, key, url):
        self.__send("SETURLMISSING", key, url)

    def seturipresent(self, key, uri):
        self.__send("SETURIPRESENT", key, uri)
    
    def seturimissing(self, key, uri):
        self.__send("SETURIMISSING", key, uri)

    def geturls(self, key, prefix):
        return askvalues(f"GETURLS {key} {prefix}")

    def __send(self, *args, **kwargs):
        print(*args, file=self.output, **kwargs)
        self.output.flush()

def main():
    if len(sys.argv) == 2 and sys.argv[1] == "setup":
        import os
        with open(os.devnull, 'w') as devnull:
            master = RemoteMaster(devnull)
            remote = GoogleRemote(master)
            remote.setup()
        return


    # redirect all non-protocol-output to stderr
    output = sys.stdout
    sys.stdout = sys.stderr

    master = RemoteMaster(output)
    master.LinkRemote(GoogleRemote(master))
    master.Listen(sys.stdin)

if __name__ == "__main__":
    main()


